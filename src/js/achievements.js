import { sendEvent, reportError } from './networking';
import { storageGetSync, storageSetSync, getMessage, FEATURES } from './util';
import browser from 'webextension-polyfill';

const ACHIEVEMENTS = {
  lng_choice: {
    type: 'singular',
    title: '–í–∏–∑–Ω–∞—á–∏–ª–∏—Å—è –∑ –º–æ–≤–æ—é!',
    description: '–í–∏ –≤–∏–∑–Ω–∞—á–∏–ª–∏—Å—è –∑ –º–æ–≤–∞–º–∏, —è–∫—ñ —Ö–æ—á–µ—Ç–µ –±–∞—á–∏—Ç–∏, –∞ —è–∫–∏—Ö ‚Äì –Ω—ñ!',
  },
  gs_rewrite: {
    type: 'stack',
    milestones: [1, 100, 1000],
    title_1: 'Google üîé –±–µ–∑ {lessLanguages}!',
    title_100: '100 √ó Google üîé –±–µ–∑ {lessLanguages}!',
    title_1000: '100 √ó Google üîé –±–µ–∑ {lessLanguages}!!!',
    description_1:
      '–í–∞—à—ñ –ø–µ—Ä—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –≤ Google –±–µ–∑ {lessLanguages}!\n–í–∞–º –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è?',
    description_100:
      '–í–∂–µ —Å—Ç–æ —Ä–∞–∑—ñ–≤ —à—É–∫–∞–ª–∏ –≤ Google –±–µ–∑ {lessLanguages}!\n–Ø–∫ –≤–∞–º? üòä',
    description_1000:
      '–í–æ—É! –ê–∂ 1000 (—Ç–∏—Å—è—á–∞!!!) –ø–æ—à—É–∫—ñ–≤ –≤ Google, –±–µ–∑ {lessLanguages}!\n–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏ –∑ –¥—Ä—É–∑—è–º–∏!',
  },

  // Content-scripts achievements: 'CT_' + handlerName
  'CT_google-search': {
    type: 'singular',
    title: 'Google üîé –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º {firstLanguage}!',
    description:
      '–í—ñ—Ç–∞—î–º–æ —É –≤–∞—à–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–æ–º—É Google!\n–í–∞–º –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å {firstLanguage}?',
  },

  CT_wikipedia: {
    type: 'stack',
    milestones: [1, 10, 100],
    title_1: '–î–æ –≤–∏—Ç–æ–∫—ñ–≤! Wiki {firstLanguage}',
    title_10: '–ì–ª–∏–±—à–µ –≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é {firstLanguage}!',
    title_100: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è {firstLanguage} ü§©',
    description_1: '–¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ Wikipedia —î {firstLanguage}? –û —Ç–∞–∫!',
    description_10:
      '–í–∂–µ –¥–µ—Å—Ç—å —Ä–∞–∑—ñ–≤ –∑–Ω–∞–π—à–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Wikipedia –≤–∞—à–∏–º–∏ –º–æ–≤–∞–º–∏!\n–í–∞–º –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è? –î—ñ–ª—ñ—Ç—å—Å—è –∑ –¥—Ä—É–∑—è–º–∏!',
    description_100:
      '–í–∂–µ –≤ —Å–æ—Ç–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Wikipedia –≤–∞—à–∏–º–∏ –º–æ–≤–∞–º–∏!\n–ü–æ–¥–æ–±–∞—î—Ç—å—Å—è? –î—ñ–ª—ñ—Ç—å—Å—è –∑ –¥—Ä—É–∑—è–º–∏!',
  },

  CT_linkedin: {
    type: 'singular',
    title: 'LinkedIn –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º {firstLanguage}!',
    description:
      '–í—ñ—Ç–∞—î–º–æ —É –≤–∞—à–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–æ–º—É LinkedIn!\n–í–∞–º –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å {firstLanguage}?',
  },
  CT_youtube: {
    type: 'singular',
    title: 'YouTube –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º {firstLanguage}!',
    description:
      '–í—ñ—Ç–∞—î–º–æ —É –≤–∞—à–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–æ–º—É YouTube!\n–í–∞–º –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å {firstLanguage}?',
  },
};

export async function trackAchievement(acKey, options = {}) {
  if (!FEATURES.ACHIEVEMENTS) return true;

  const acData = ACHIEVEMENTS[acKey] || {};
  const storageAchievementKey = `AC_${acKey}`;
  if (!acData) {
    reportError(
      `Attempted to track unknown achievement '${acKey}'`,
      new Error('stack')
    );
    return Promise.reject('Unknown achievement');
  }
  let { [storageAchievementKey]: value } = await storageGetSync(
    storageAchievementKey
  );
  if (!value) value = 0;
  value = value + 1;

  // Singular type has a single implicit milestone
  const milestones = acData.type == 'stack' ? acData.milestones : [1];
  if (!milestones.includes(value)) return;

  const achievementData = { [storageAchievementKey]: value };
  return storageSetSync(achievementData).then(() => {
    sendEvent(`Achievement unlocked`, {
      achievementKey: storageAchievementKey,
      achievementValue: value,
    });
    if (!options.silent) _displayNewAchievement(acKey, value, options);
    return true;
  });
}

async function _displayNewAchievement(acKey, value, options) {
  if (!FEATURES.ACHIEVEMENTS_DISPLAY) return;

  console.log(`Display achievement ${acKey}`, value, options);
  try {
    let titleKey =
      ACHIEVEMENTS[acKey].type == 'stack' ? `title_${value}` : 'title';
    let descKey =
      ACHIEVEMENTS[acKey].type == 'stack'
        ? `description_${value}`
        : 'description';

    let title = options.title || ACHIEVEMENTS[acKey][titleKey];
    let description = options.description || ACHIEVEMENTS[acKey][descKey];

    const pattern = new RegExp(
      '{(' + Object.keys(options).join('|') + ')}',
      'g'
    );

    const localizeKey = (match, key) => {
      let value = options[key];
      if (!value) {
        console.error(`No value defined for ${key} in ${acKey}`);
        return key;
      }

      value = value.replace(/^__MSG_(\w+)__$/, function (match, v1) {
        return v1 ? getMessage(v1) : '';
      });
      return value ? value : key;
    };

    title = title.replace(pattern, localizeKey);
    description = description.replace(pattern, localizeKey);

    browser.notifications.create('AchievementUnlocked' + acKey, {
      title: `üèÜ ${title}`,
      message: description,
      iconUrl: '/icon-128.png',
      type: 'basic',
      buttons: [
        {
          title: '–í—Å—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è',
        },
      ],
    });

    browser.notifications.onButtonClicked.addListener(
      function (notifId, btnIdx) {
        if (notifId.startsWith('AchievementUnlocked') && btnIdx === 0) {
          browser.tabs.create({ url: 'https://lu.hmara.info/achievements' });
        }
      }
    );
  } catch (e) {
    reportError('Failed to create achievement notification', e);
  }
}
